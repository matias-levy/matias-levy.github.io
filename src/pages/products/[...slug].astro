---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import ProductTabBtn from "@components/ui/buttons/ProductTabBtn.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}

// This gets the static paths for all the unique products

export async function getStaticPaths() {
  const productEntries = await getCollection("products");
  return productEntries.map((product) => {
    const slugWithoutLang = product.slug.replace(/^en\//, ""); // Remove the "en/" prefix
    return {
      params: { slug: slugWithoutLang },
      props: { product },
    };
  });
}

const { product } = Astro.props;

const pageTitle: string = `${product.data.title} | ${SITE.title}`;
---

<MainLayout title={pageTitle}>
  <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div>

  <section
    class="mx-auto flex max-w-[85rem] flex-col px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <div>
      <p
        id="fadeText"
        class="mb-8 max-w-prose text-pretty font-light text-neutral-700 dark:text-neutral-300 sm:text-xl"
      >
        {product.data.description}
      </p>
    </div>
    <div
      class="flex flex-col items-center justify-between space-y-4 sm:flex-row sm:space-y-0"
    >
      <div id="fadeInUp">
        <h1
          class="block text-4xl font-bold tracking-tighter text-neutral-800 dark:text-neutral-200 sm:text-5xl md:text-6xl lg:text-7xl"
        >
          {product.data.title}
        </h1>
        <p class="mt-4 text-lg text-neutral-600 dark:text-neutral-400">
          <div class="flex flex-wrap gap-2">
            {
              product.data.tags.map((tag) => {
                return (
                  <div class="text-nowrap rounded-full bg-yellow-500 px-2 text-sm font-bold text-gray-900">
                    {tag}
                  </div>
                );
              })
            }
          </div>
        </p>
        <div class="mt-10 flex gap-4">
          <PrimaryCTA title={"Manual"} url={product.data.manualURL} />
          <PrimaryCTA title={"ModularGrid"} url={product.data.modularGridURL} />
        </div>
      </div>
      <div>
        <Image
          id="fadeInMoveRight"
          src={product.data.imgMain}
          class="w-[600px]"
          alt={product.data.imgMainAlt}
          format={"avif"}
          loading={"eager"}
        />
      </div>
    </div>
  </section>

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <nav
      class="mx-auto grid max-w-6xl gap-y-px sm:flex sm:gap-x-4 sm:gap-y-0"
      aria-label="Tabs"
      role="tablist"
    >
      <ProductTabBtn
        title={"Highlights"}
        id={"Highlights"}
        dataTab={"#tabs-with-card-1"}
        first={true}
      />
      <ProductTabBtn
        title={"Photos and videos"}
        id={"Photos and videos"}
        dataTab={"#tabs-with-card-2"}
        first={false}
      />
    </nav>

    <div class="mt-12 md:mt-16">
      <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2">
            {
              product.data.highlightsList.map((list) => (
                <div class="flex">
                  <div>
                    <h3 class="text-base font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg">
                      {list.title}
                    </h3>
                    <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                      {list.subTitle}
                    </p>
                  </div>
                </div>
              ))
            }
            <div class="flex">
              <div>
                <h3
                  class="text-base font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg"
                >
                  Technical Specifications
                </h3>
                <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                  <ul>
                    <li>Module width: {product.data.specifications.HP}</li>
                    <li>Module depth: {product.data.specifications.depth}</li>
                    <li>
                      +12v rail consumption: {
                        product.data.specifications["current+12"]
                      }
                    </li>
                    <li>
                      -12v rail consumption: {
                        product.data.specifications["current-12"]
                      }
                    </li>
                    <li>
                      Input impeadence: {
                        product.data.specifications.inputImpeadence
                      }
                    </li>
                    <li>
                      Output impeadence: {
                        product.data.specifications.outputImpeadence
                      }
                    </li>
                    {
                      product.data.specifications.extra && (
                        <li>
                          Output impeadence: {product.data.specifications.extra}
                        </li>
                      )
                    }
                  </ul>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div id="tabs-with-card-2" class="hidden" role="tabpanel">
        <div class="flex flex-col items-center gap-10 pb-10">
          <div class="flex flex-wrap justify-around gap-7">
            {
              product.data.images.map((img) => {
                return (
                  <Image
                    src={img.image}
                    alt={img.imgAlt}
                    draggable={"false"}
                    format={"avif"}
                    class={"w-[500px] rounded-lg"}
                  />
                );
              })
            }
          </div>
          {product.data.youtube && <div set:html={product.data.youtube} />}
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  import { gsap } from "gsap";

  type AnimationSettings = {
    autoAlpha?: number;
    y?: number;
    x?: number;
    willChange?: string;
  };

  function setElementAnimationDefaults(
    id: string,
    settings: AnimationSettings
  ) {
    gsap.set(id, settings);
  }

  setElementAnimationDefaults("#fadeText", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInUp", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInMoveRight", {
    autoAlpha: 0,
    x: 300,
    willChange: "transform, opacity",
  });

  let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });

  timeline.to("#fadeText", {
    duration: 1.5,
    autoAlpha: 1,
    y: 0,
    delay: 1,
    ease: "power2.out",
  });

  timeline.to(
    "#fadeInUp",
    { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" },
    "-=1.2"
  );

  timeline.to(
    "#fadeInMoveRight",
    { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" },
    "-=1.4"
  );

  timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn: any, activeButton: any) {
      if (btn !== activeButton) {
        btn.classList.remove(
          "active",
          "bg-neutral-100",
          "hover:border-transparent",
          "dark:bg-white/[.05]"
        );

        const tabId = btn.getAttribute("data-target");
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) {
            contentElement.classList.add("hidden");
          }
        }

        changeHeadingStyle(
          btn,
          ["text-neutral-800", "dark:text-neutral-200"],
          ["text-orange-400", "dark:text-orange-300"]
        );
      }
    }

    function activateButton(button: any) {
      button.classList.add(
        "active",
        "bg-neutral-100",
        ",hover:border-transparent",
        "dark:bg-white/[.05]"
      );

      const tabId = button.getAttribute("data-target");
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) {
          contentElementToShow.classList.remove("hidden");
        }
      }

      changeHeadingStyle(
        button,
        ["text-orange-400", "dark:text-orange-300"],
        ["text-neutral-800", "dark:text-neutral-200"]
      );
    }

    function changeHeadingStyle(
      button: any,
      addClasses: any,
      removeClasses: any
    ) {
      let heading = button.querySelector("span");
      if (heading) {
        heading.classList.remove(...removeClasses);
        heading.classList.add(...addClasses);
      }
    }

    const tabButtons = document.querySelectorAll("[data-target]");

    if (tabButtons.length > 0) {
      changeHeadingStyle(
        tabButtons[0],
        ["text-orange-400", "dark:text-orange-300"],
        []
      );
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>
